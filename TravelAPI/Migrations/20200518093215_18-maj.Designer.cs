// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TravelAPI;

namespace TravelAPI.Migrations
{
    [DbContext(typeof(TravelAPIContext))]
    [Migration("20200518093215_18-maj")]
    partial class _18maj
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TravelAPI.Models.AttractionModel", b =>
                {
                    b.Property<int>("AttractionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Information")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsChildFriendly")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("AttractionId");

                    b.HasIndex("CityId");

                    b.ToTable("Attractions");

                    b.HasData(
                        new
                        {
                            AttractionId = 1,
                            CityId = 1,
                            Information = "The empty niches of the Buddha statues dominate the Bamiyan valley. Carved in the 6th century, the two statues, standing 38m and 55m respectively, were the tallest standing statues of Buddha ever made.",
                            IsChildFriendly = true,
                            Location = "Bamiyan Valley, west of Kabul",
                            Name = "Buddha Niches",
                            Rating = 4
                        },
                        new
                        {
                            AttractionId = 2,
                            CityId = 1,
                            Information = "The Kabul Museum was once one of the greatest museums in the world. Its exhibits, ranging from Hellenistic gold coins to Buddhist statuary and Islamic bronzes, testified to Afghanistan’s location at the crossroads of Asia. After years of abuse during the civil war, help from the international community and the peerless dedication of its staff means the museum is slowly rising from the ashes. The museum opened in 1919, and was almost entirely stocked with items excavated in Afghanistan.",
                            IsChildFriendly = true,
                            Location = "Kabul",
                            Name = "Kabul Museum",
                            Rating = 3
                        });
                });

            modelBuilder.Entity("TravelAPI.Models.CityModel", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Population")
                        .HasColumnType("int");

                    b.HasKey("CityId");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            CityId = 1,
                            CountryId = 1,
                            Name = "Kabul",
                            Population = 4222000
                        },
                        new
                        {
                            CityId = 2,
                            CountryId = 1,
                            Name = "Balkh",
                            Population = 1382200
                        },
                        new
                        {
                            CityId = 3,
                            CountryId = 1,
                            Name = "Kandahar",
                            Population = 614118
                        });
                });

            modelBuilder.Entity("TravelAPI.Models.CountryInfoModel", b =>
                {
                    b.Property<int>("CountryInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Area")
                        .HasColumnType("int");

                    b.Property<int>("BNP")
                        .HasColumnType("int");

                    b.Property<string>("CapitalCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Governance")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalDay")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Population")
                        .HasColumnType("int");

                    b.Property<bool>("RightHandTraffic")
                        .HasColumnType("bit");

                    b.Property<string>("TimeZone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CountryInfoId");

                    b.ToTable("CountryInfo");

                    b.HasData(
                        new
                        {
                            CountryInfoId = 1,
                            Area = 65200,
                            BNP = 19360,
                            CapitalCity = "Kabul",
                            Governance = "Islamic Republic",
                            Language = "Dari/Pashtu/Iranian",
                            NationalDay = "19/8",
                            Population = 50000,
                            RightHandTraffic = true,
                            TimeZone = "GMT+4:30"
                        });
                });

            modelBuilder.Entity("TravelAPI.Models.CountryModel", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryInfoId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TravelRestrictionId")
                        .HasColumnType("int");

                    b.HasKey("CountryId");

                    b.HasIndex("CountryInfoId");

                    b.HasIndex("TravelRestrictionId");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            CountryId = 1,
                            CountryInfoId = 1,
                            Name = "Afghanistan",
                            TravelRestrictionId = 1
                        });
                });

            modelBuilder.Entity("TravelAPI.Models.TravelRestrictionModel", b =>
                {
                    b.Property<int>("TravelRestrictionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsCitizenshipAllowed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFamilyVisitAllowed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsImmigrationAllowed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTourismAllowed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVisaNeeded")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWorkTravelAllowed")
                        .HasColumnType("bit");

                    b.Property<int>("RiskLevel")
                        .HasColumnType("int");

                    b.HasKey("TravelRestrictionId");

                    b.ToTable("TravelRestrictions");

                    b.HasData(
                        new
                        {
                            TravelRestrictionId = 1,
                            IsCitizenshipAllowed = true,
                            IsFamilyVisitAllowed = true,
                            IsImmigrationAllowed = true,
                            IsTourismAllowed = false,
                            IsVisaNeeded = true,
                            IsWorkTravelAllowed = true,
                            RiskLevel = 4
                        });
                });

            modelBuilder.Entity("TravelAPI.Models.AttractionModel", b =>
                {
                    b.HasOne("TravelAPI.Models.CityModel", "City")
                        .WithMany("Attractions")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TravelAPI.Models.CityModel", b =>
                {
                    b.HasOne("TravelAPI.Models.CountryModel", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TravelAPI.Models.CountryModel", b =>
                {
                    b.HasOne("TravelAPI.Models.CountryInfoModel", "CountryInfo")
                        .WithMany()
                        .HasForeignKey("CountryInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelAPI.Models.TravelRestrictionModel", "TravelRestriction")
                        .WithMany()
                        .HasForeignKey("TravelRestrictionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
